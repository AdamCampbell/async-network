{"name":"Async-network","tagline":"Cocoa and iOS Socket Networking Evolved","google":"UA-30655837-2","body":"Async Network is a framework for socket networking on COCOA or iOS based on\r\n[AsyncSocket](https://github.com/robbiehanson/CocoaAsyncSocket).\r\n\r\n## Quick Start\r\n\r\n### Client-Server Networking\r\n\r\nIn client-server networking, clients connect to servers to exchange messages.\r\nIn AsyncNetwork, every client will automatically connect to every discovered\r\nserver with the same service name. Servers are discovered using\r\n[Bonjour](http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/NetServices/Articles/about.html).\r\n\r\nIn the server process, create an AsyncServer instance, define the Bonjour\r\nservice name and start the server.\r\n\r\n```objc\r\nAsyncServer *server = [AsyncServer new];\r\nserver.serviceName = @\"MyServer\";\r\n[server start];\r\n```\r\n\r\nIn the client process, create an AsyncClient instance, and start it. It will\r\nautomatically connect to any discovered servers.\r\n\r\n```objc\r\nAsyncClient *client [AsyncClient new];\r\n[client start];\r\n```\r\n\r\nTo receive messages, assign a delegate to the server and/or client, and\r\nimplement `server:didReceiveCommand:object:`.\r\n\r\n```objc\r\nserver.delegate = myController;\r\n\r\n// in MyController.m\r\n- (void)server:(AsyncServer *)theServer didReceiveCommand:(AsyncCommand)command object:(id)object {\r\n    // respond to incoming messages here\r\n}\r\n````\r\n\r\nTo send messages, call `sendCommand:object:` on the server and/or client. The\r\nmessage object is automatically encoded via\r\n[NSCoding](https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Protocols/NSCoding_Protocol/Reference/Reference.html).\r\n\r\n```objc\r\n[client sendCommand:command object:message];\r\n```\r\n\r\nCommand is a 32bit number that can be used to identify the type of message being sent.\r\n\r\n### Peer-To-Peer Networking\r\n\r\nIn peer-to-peer networking, every peer can exchange messages with every other\r\npeer on the network. To implement peer-to-peer networking on AsyncNetwork, you\r\nmay either use the `AsyncBroadcaster` or have every peer instantiate an\r\n`AsyncServer` and a `AsyncClient`.\r\n\r\nWith the `AsyncBroadcaster` messages can be send to all peers on the same\r\nsubnet. The broadcaster can only send binary data (NSData) and it is not\r\nguaranteed that the data arrives in order.\r\n\r\n```objc\r\nAsyncBroadcaster *broadcaster = [AsyncBroadcaster new];\r\n[broadcaster start];\r\n[broadcaster broadcast:data];\r\n```\r\n\r\nIf you create many servers and clients on your network to implement\r\npeer-to-peer networking this way, you may benefit from disabling the\r\nautomatic connection feature of the client. This way, you can initiate a\r\nnetwork connection only as needed, which is especially beneficial if your\r\nplan to implement request-based peer-to-peer networking.\r\n\r\n### Request-Based Networking\r\n\r\nIn request-based networking, a server listens for requests from clients and\r\nsends a response that is bound to the original request. HTTP servers are\r\nimplemented this way.\r\n\r\nTo send a request call `sendObject:responseHandler:` on a client and provide a\r\nblock that is called with the server's response to the request.\r\n\r\n```objc\r\n[client sendCommand:command object:message responseHandler:^(id<NSCoding> response) {\r\n    // react to the response here\r\n}];\r\n```\r\n\r\nOn the server, you must implement the delegate method\r\n`server:didReceiveCommand:object:connection:responseBlock:`\r\n\r\n```objc\r\n- (void)server:(AsyncServer *)theServer didReceiveCommand:(AsyncCommand)command object:(id)object connection:(AsyncConnection *)connection responseBlock:(AsyncNetworkResponseBlock)block;\r\n\tid<NSCoding> yourResponse = ...;\r\n\tblock(yourResponse);\r\n}\r\n```\r\n\r\nIf you do not want to keep your connections alive longer than necessary, you\r\nshould use `AsyncRequest` instead of `AsyncClient`. `AsyncRequest` will connect\r\nto a server, send a request, wait for the response, and disconnect in one call.\r\n\r\n```objc\r\n[AsyncRequest fireRequestWithHost:@\"192.168.0.1\" port:12345 command:0 object:message responseBlock:^(id<NSCoding> response, NSError *error) {\r\n    // react to the response here\r\n}];\r\n```\r\n\r\n## Examples\r\n\r\nExamples are located in `Examples/`. Install AsyncNetwork as a shared framework\r\nbefore running an example.\r\n\r\n### Broadcaster\r\n\r\nBroadcaster demonstrates the use of AsyncBroadcaster to broadcast messages to\r\nmultiple recipients over the local network.\r\n\r\n### ClientServer\r\n\r\nClientServer demonstrates how AsyncClient and AsyncServer are set up to\r\nautomatically connect to each other and exchange messages. You can create\r\nmore servers with CMD-1 and more clients with CMD-2.\r\n\r\n### MobileClient\r\n\r\nMobileClient demonstrates how to use AsyncNetwork on iOS. It creates a single\r\nAsyncClient that automatically connects to any servers created from\r\nthe ClientServer example.\r\n\r\n### Request\r\n\r\nRequest demonstrates the use of AsyncRequests to implement request-based\r\nnetworking.\r\n\r\n### Notify\r\n\r\nNotify demonstrates sending a broadcast from a ruby or node server to an iOS\r\nclient. This can be used as a local notification to trigger an update on the\r\nmobile client.\r\n\r\n\r\n## Installation\r\n\r\nTo compile and install AsyncNetwork, run `makeImage`. This will compile two\r\nversions of the AsyncNetwork framework: a dynamic framework to be used on Mac\r\nOS X and a static framework to be used on iOS or the iOS Simulator. The\r\ncompiled frameworks will be placed into `dist/`\r\n\r\n### Install as Shared Dynamic Framework (Mac OS X)\r\n\r\n1. Copy `AsyncNetwork.framework` to `/Library/Frameworks/`\r\n2. Add the framework to your project: (Summary of main target) Click \"+\"\" below\r\n   \"Linked Frameworks and Libraries\" and select `AsyncNetwork.framework` from the\r\n   list.\r\n3. Add `#import <AsyncNetwork/AsyncNetwork.h>` to any file that uses the\r\n   framework.\r\n\r\nNote that AsyncNetwork must be installed as a shared framework on all machines\r\nthat run your application.\r\n\r\n### Install as Embedded Framework (Mac OS X or iOS)\r\n\r\n1. Add a \"Copy Files\" Build Phase to your main target\r\n2. Change Destination to \"Frameworks\"\r\n3. Drag `AsyncNetwork.framework` (dynamic or static version) into the list of files\r\n\r\nThis method does not rely on an installed version of the framework but instead\r\ncopy AsyncNetwork into the application bundle.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}